-- Drop existing policies to avoid conflicts
DROP POLICY IF EXISTS "Enable read access for all users" ON programs;
DROP POLICY IF EXISTS "Enable read access for all users" ON program_speakers;

-- Update speakers in users table
INSERT INTO users (id, username, first_name, last_name, is_admin, role)
VALUES 
    ('katyurina', '@katyurina', '–î–∞—Ä—å—è', '–ö–∞—Ç—é—Ä–∏–Ω–∞', false, 'speaker'),
    ('sannikova', '@sannikova', '–û–∫—Å–∞–Ω–∞', '–°–∞–Ω–Ω–∏–∫–æ–≤–∞', false, 'speaker'),
    ('sokolyanskaya', '@sokolyanskaya', '–¢–∞—Ç—å—è–Ω–∞', '–°–æ–∫–æ–ª—è–Ω—Å–∫–∞—è', false, 'speaker'),
    ('temnov', '@temnov', '–ì–µ–æ—Ä–≥–∏–π', '–¢–µ–º–Ω–æ–≤', false, 'speaker'),
    ('klochkova', '@klochkova', '–¢–∞—Ç—å—è–Ω–∞', '–ö–ª–æ—á–∫–æ–≤–∞', false, 'speaker'),
    ('uhova', '@uhova', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–£—Ö–æ–≤–∞', false, 'speaker')
ON CONFLICT (id) DO UPDATE SET
    role = 'speaker',
    updated_at = CURRENT_TIMESTAMP;

-- Create programs table if not exists
CREATE TABLE IF NOT EXISTS programs (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    day_index INTEGER NOT NULL CHECK (day_index BETWEEN 0 AND 4),
    time_start TIME NOT NULL,
    time_end TIME NOT NULL,
    title TEXT NOT NULL,
    description TEXT,
    location TEXT,
    duration TEXT,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT valid_time_range CHECK (time_start < time_end)
);

-- Create program_speakers table if not exists
CREATE TABLE IF NOT EXISTS program_speakers (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    program_id UUID REFERENCES programs(id) ON DELETE CASCADE,
    speaker_id TEXT REFERENCES users(id) ON DELETE CASCADE,
    role TEXT NOT NULL CHECK (role IN ('primary', 'secondary', 'tertiary')),
    UNIQUE (program_id, speaker_id)
);

-- Create indexes if not exist
CREATE INDEX IF NOT EXISTS programs_day_index_idx ON programs(day_index);
CREATE INDEX IF NOT EXISTS programs_time_start_idx ON programs(time_start);
CREATE INDEX IF NOT EXISTS program_speakers_program_id_idx ON program_speakers(program_id);
CREATE INDEX IF NOT EXISTS program_speakers_speaker_id_idx ON program_speakers(speaker_id);

-- Enable RLS
ALTER TABLE programs ENABLE ROW LEVEL SECURITY;
ALTER TABLE program_speakers ENABLE ROW LEVEL SECURITY;

-- Create policies with unique names
CREATE POLICY "programs_select_policy_v1"
ON programs FOR SELECT
USING (true);

CREATE POLICY "program_speakers_select_policy_v1"
ON program_speakers FOR SELECT
USING (true);

-- Create function to update timestamps if not exists
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger for updating timestamps if not exists
DROP TRIGGER IF EXISTS update_programs_updated_at ON programs;
CREATE TRIGGER update_programs_updated_at
    BEFORE UPDATE ON programs
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Clear existing data
TRUNCATE TABLE program_speakers CASCADE;
TRUNCATE TABLE programs CASCADE;

-- Insert initial program data
DO $$ 
DECLARE
    mon_2 UUID := gen_random_uuid();
    mon_3 UUID := gen_random_uuid();
    mon_4 UUID := gen_random_uuid();
    mon_5 UUID := gen_random_uuid();
    mon_6 UUID := gen_random_uuid();
    mon_7 UUID := gen_random_uuid();
    tue_1 UUID := gen_random_uuid();
    tue_2 UUID := gen_random_uuid();
    tue_3 UUID := gen_random_uuid();
    tue_4 UUID := gen_random_uuid();
    tue_5 UUID := gen_random_uuid();
    tue_6 UUID := gen_random_uuid();
    tue_7 UUID := gen_random_uuid();
    tue_8 UUID := gen_random_uuid();
    tue_9 UUID := gen_random_uuid();
    tue_10 UUID := gen_random_uuid();
    wed_1 UUID := gen_random_uuid();
    wed_2 UUID := gen_random_uuid();
    wed_3 UUID := gen_random_uuid();
    thu_1 UUID := gen_random_uuid();
    thu_2 UUID := gen_random_uuid();
    thu_3 UUID := gen_random_uuid();
    fri_1 UUID := gen_random_uuid();
    fri_2 UUID := gen_random_uuid();
BEGIN
    -- Insert programs
    INSERT INTO programs (id, day_index, time_start, time_end, title, description, location, duration) VALUES
        -- Monday
        (mon_2, 0, '14:00', '16:00', '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –≤ –æ—Ç–µ–ª—å', '–ü–æ—Å–∞–¥–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –°–ü–ü –≤ –∞–≤—Ç–æ–±—É—Å, —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –≤ –ö–æ–Ω–≥—Ä–µ—Å—Å-–æ—Ç–µ–ª—å', '–°—Ç–æ—è–Ω–∫–∞ –¢–¶ "–•–æ—Ä–æ—à–æ"', '2 —á.'),
        (mon_3, 0, '15:00', '16:00', '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏ –ö–ü –≤—Å—Ç—Ä–µ—á–∏ –¢—Ä–µ–Ω–µ—Ä–æ–≤ –°–ü–ü –≤ –æ—Ç–µ–ª–µ', '–ü—Ä–∏–±—ã—Ç–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ –ö–ü –≤ –ö–æ–Ω–≥—Ä–µ—Å—Å-–æ—Ç–µ–ª—å', '–û—Ç–µ–ª—å', '30 –º.'),
        (mon_4, 0, '16:00', '16:30', '–í—Å—Ç—Ä–µ—á–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏ –ö–ü –¢—Ä–µ–Ω–µ—Ä–æ–≤ –°–ü–ü –≤ –æ—Ç–µ–ª–µ', '–í—Å—Ç—Ä–µ—á–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –°–ü–ü –≤ –ö–æ–Ω–≥—Ä–µ—Å—Å-–æ—Ç–µ–ª–µ', '–û—Ç–µ–ª—å', '30 –º.'),
        (mon_5, 0, '17:30', '17:45', '–£—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ö–ü', '–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–æ–≥–æ —Å–æ–±—Ä–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ö–ü', '–¢–ó', '15 –º.'),
        (mon_6, 0, '17:45', '18:45', '–û–±—â–µ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ö–ü', NULL, '–¢–ó', '1 —á.'),
        (mon_7, 0, '19:00', '20:00', '–£–∂–∏–Ω', NULL, '–†–µ—Å—Ç–æ—Ä–∞–Ω', '1 —á.'),
        
        -- Tuesday
        (tue_1, 1, '08:00', '09:30', 'üç≥ –ó–∞–≤—Ç—Ä–∞–∫', NULL, '–†–µ—Å—Ç–æ—Ä–∞–Ω', '1 —á. 30 –º.'),
        (tue_2, 1, '10:00', '11:00', '–£—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–æ–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: ¬´–°—Ç—Ä–∞—Ç–µ–≥–∏—è –î–û–∏–†–ü 2025¬ª', '–¢–ó', '15 –º.'),
        (tue_3, 1, '11:00', '12:00', '–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –æ—Ç–¥–µ–ª–æ–≤ –î–û–∏–†–ü –∑–∞ 2024 –≥. –∏ –∑–∞–¥–∞—á–∏ –Ω–∞ 2025 –≥.', '–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ —Ä–∞–±–æ—Ç—ã –æ—Ç–¥–µ–ª–æ–≤ –î–û–∏–†–ü –ø–æ 2024 –≥. —Ü–µ–ª–∏ –Ω–∞ 2025 –≥.', '–¢–ó', '1 —á.'),
        (tue_4, 1, '12:00', '12:20', '‚òïÔ∏è –ö–æ—Ñ–µ-–±—Ä–µ–π–∫ ‚Ññ1', NULL, '–¢–ó', '20 –º.'),
        (tue_5, 1, '12:20', '14:00', '–¶–µ–Ω—Ç—Ä –æ—Ü–µ–Ω–∫–∏', '–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –æ—Ü–µ–Ω–∫–∏ –¢–°–ü–ü —á–∞—Å—Ç—å 1', '–¢–ó', '1 —á. 40 –º.'),
        (tue_6, 1, '14:00', '15:00', 'üçΩ –û–±–µ–¥', NULL, '–†–µ—Å—Ç–æ—Ä–∞–Ω', '1 —á.'),
        (tue_7, 1, '15:00', '16:20', '–¶–µ–Ω—Ç—Ä –æ—Ü–µ–Ω–∫–∏', '–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –æ—Ü–µ–Ω–∫–∏ –¢–°–ü–ü —á–∞—Å—Ç—å 2', '–¢–ó', '1 —á. 20 –º.'),
        (tue_8, 1, '16:20', '16:40', '‚òïÔ∏è –ö–æ—Ñ–µ-–±—Ä–µ–π–∫ ‚Ññ1', NULL, '–¢–ó', '20 –º.'),
        (tue_9, 1, '16:40', '18:00', '–¶–µ–Ω—Ç—Ä –æ—Ü–µ–Ω–∫–∏', '–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –æ—Ü–µ–Ω–∫–∏ –¢–°–ü–ü —á–∞—Å—Ç—å 3', '–¢–ó', '1 —á. 20 –º.'),
        (tue_10, 1, '18:00', '18:10', 'üèñ –ü–µ—Ä–µ—Ä—ã–≤', NULL, '–¢–ó', '20 –º.'),
        
        -- Wednesday
        (wed_1, 2, '08:00', '09:00', '–ó–∞–≤—Ç—Ä–∞–∫', NULL, '–†–µ—Å—Ç–æ—Ä–∞–Ω', '1 —á.'),
        (wed_2, 2, '10:00', '12:00', '–†–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è: "–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –¢–°–ü–ü ‚Äì –æ–±–º–µ–Ω –æ–ø—ã—Ç–æ–º"', NULL, '–¢–ó', '2 —á.'),
        (wed_3, 2, '15:00', '18:00', '–¢—Ä–µ–Ω–∏–Ω–≥ –Ω–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ', NULL, '–¢–ó', '3 —á.'),
        
        -- Thursday
        (thu_1, 3, '08:00', '09:00', '–ó–∞–≤—Ç—Ä–∞–∫', NULL, '–†–µ—Å—Ç–æ—Ä–∞–Ω', '30 –º.'),
        (thu_2, 3, '10:00', '12:00', '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã (—á–∞—Å—Ç—å 1)', NULL, '–¢–ó', '2 —á.'),
        (thu_3, 3, '15:00', '16:40', '–¢—Ä–µ–Ω–∏–Ω–≥: "–û—Å–Ω–æ–≤—ã –±–∏–∑–Ω–µ—Å–∞ FMCG"', NULL, '–¢–ó', '1 —á. 40 –º.'),
        
        -- Friday
        (fri_1, 4, '08:00', '08:30', '–ó–∞–≤—Ç—Ä–∞–∫', NULL, '–†–µ—Å—Ç–æ—Ä–∞–Ω', '30 –º.'),
        (fri_2, 4, '10:00', '12:00', '–¢–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ö–ü', NULL, '–¢–ó', '2 —á.');

    -- Link speakers to programs
    INSERT INTO program_speakers (program_id, speaker_id, role) VALUES
        (mon_2, 'katyurina', 'primary'),
        (mon_3, 'sannikova', 'primary'),
        (mon_4, 'sannikova', 'primary'),
        (mon_4, 'katyurina', 'secondary'),
        (mon_5, 'sokolyanskaya', 'primary'),
        (mon_5, 'temnov', 'secondary'),
        (mon_6, 'katyurina', 'primary'),
        (tue_2, 'sokolyanskaya', 'primary'),
        (tue_3, 'klochkova', 'primary'),
        (tue_3, 'uhova', 'secondary'),
        (tue_3, 'temnov', 'tertiary'),
        (tue_5, 'katyurina', 'primary'),
        (tue_7, 'katyurina', 'primary'),
        (tue_9, 'katyurina', 'primary'),
        (wed_2, 'katyurina', 'primary');
END $$;

-- Grant permissions
GRANT ALL ON ALL TABLES IN SCHEMA public TO authenticated;