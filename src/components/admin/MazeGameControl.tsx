import React, { useState, useEffect } from 'react';
import { Trophy, Users, Play, Square } from 'lucide-react';
import { motion } from 'framer-motion';
import { supabase } from '../../lib/supabase';
import { sendMessageToGroup } from '../../lib/telegramBot';
import { showNotification } from '../../utils/notifications';
import { Team, MazeGame } from '../../types/game';
import { UserProfile } from '../../types';
import { TeamCard } from './maze/TeamCard';
import { GameControls } from './maze/GameControls';
import { NoGame } from './maze/NoGame';

const MAZE_GAME_STORAGE_KEY = 'current_maze_game';
const POINTS_PER_LEVEL = 50;
const TEAM_NAMES = ['–ö—Ä–∞—Å–Ω—ã–µ', '–°–∏–Ω–∏–µ', '–ó–µ–ª—ë–Ω—ã–µ', '–ñ—ë–ª—Ç—ã–µ'];

export function MazeGameControl() {
  const [users, setUsers] = useState<UserProfile[]>([]);
  const [currentGame, setCurrentGame] = useState<MazeGame | null>(null);
  const [loading, setLoading] = useState(true);
  const [teamsLocked, setTeamsLocked] = useState(false);

  useEffect(() => {
    const fetchUsers = async () => {
      const { data } = await supabase
        .from('users')
        .select('*')
        .order('first_name');
      if (data) setUsers(data);
    };

    const restoreGameState = async () => {
      try {
        const { data } = await supabase
          .from('maze_games')
          .select('*')
          .eq('active', true)
          .single();

        if (data) {
          setCurrentGame(data);
          setTeamsLocked(Boolean(data.teams_locked));
          localStorage.setItem(MAZE_GAME_STORAGE_KEY, JSON.stringify(data));
        }
      } catch (error) {
        console.error('Error restoring game state:', error);
      }
    };

    Promise.all([fetchUsers(), restoreGameState()]).finally(() => setLoading(false));

    // Subscribe to game updates
    const subscription = supabase
      .channel('maze_games')
      .on('postgres_changes', { event: '*', schema: 'public', table: 'maze_games' },
        () => restoreGameState()
      )
      .subscribe();

    return () => {
      subscription.unsubscribe();
    };
  }, []);

  const handleStartGame = async () => {
    setLoading(true);
    try {
      const teams: Team[] = TEAM_NAMES.map(name => ({
        id: crypto.randomUUID(),
        name,
        members: [],
        score: 0,
        level: 0
      }));

      const game: MazeGame = {
        id: crypto.randomUUID(),
        active: true,
        teams,
        started_at: new Date().toISOString()
      };

      const { error } = await supabase
        .from('maze_games')
        .insert([game]);

      if (error) throw error;

      setCurrentGame(game);
      localStorage.setItem(MAZE_GAME_STORAGE_KEY, JSON.stringify(game));
      
      await sendMessageToGroup('üéÆ –ù–∞—á–∞–ª–∞—Å—å –∏–≥—Ä–∞ "–õ–∞–±–∏—Ä–∏–Ω—Ç"!\n\nüë• 4 –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω–µ–π.\n\nüí´ –ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç –±–∞–ª–ª—ã.\n\nüéØ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.', 'admin');
      
      showNotification({
        title: '–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞',
        message: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º',
        type: 'success'
      });
    } catch (error) {
      console.error('Error starting game:', error);
      showNotification({
        title: '–û—à–∏–±–∫–∞',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É',
        type: 'error'
      });
    } finally {
      setLoading(false);
    }
  };

  const handleEndGame = async () => {
    if (!currentGame) return;

    setLoading(true);
    try {
      const { data: latestGame, error: fetchError } = await supabase
        .from('maze_games')
        .select('*')
        .eq('id', currentGame.id)
        .single();

      if (fetchError) throw fetchError;
      if (!latestGame) throw new Error('Game not found');

      // Calculate points before updating game status
      const teamUpdates = [];
      for (const team of latestGame.teams) {
        const totalPoints = team.level * POINTS_PER_LEVEL;
        if (totalPoints <= 0 || !team.members.length) continue;

        teamUpdates.push({
          members: team.members,
          points: totalPoints
        });
      }

      // Update game status
      const { error: updateError } = await supabase
        .from('maze_games')
        .update({
          active: false,
          ended_at: new Date().toISOString()
        })
        .eq('id', currentGame.id);

      if (updateError) throw updateError;

      // Award points to team members
      await Promise.all(teamUpdates.map(async ({ members, points }) => {
        return supabase
          .rpc('increment_user_points', {
            user_ids: members,
            points_to_add: points
          });
      }));

      setCurrentGame(null);
      localStorage.removeItem(MAZE_GAME_STORAGE_KEY);
      
      // Send game results to Telegram group
      const results = latestGame.teams.map(team => {
        const points = team.level * POINTS_PER_LEVEL;
        return `${team.name}: –£—Ä–æ–≤–µ–Ω—å ${team.level} (${points} –±–∞–ª–ª–æ–≤)${
          team.members.length ? ` ‚Ä¢ ${team.members.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤` : ''
        }`;
      }).join('\n');
        
      await sendMessageToGroup(`üèÅ –ò–≥—Ä–∞ "–õ–∞–±–∏—Ä–∏–Ω—Ç" –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n${results}`, 'admin');
      
      showNotification({
        title: '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        message: '–í—Å–µ –±–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º',
        type: 'success'
      });

    } catch (error) {
      console.error('Error ending game:', error);
      showNotification({
        title: '–û—à–∏–±–∫–∞',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É',
        type: 'error'
      });
    } finally {
      setLoading(false);
    }
  };

  const handleLockTeams = async () => {
    if (!currentGame) return;
    
    try {
      const { error } = await supabase
        .from('maze_games')
        .update({ teams_locked: true })
        .eq('id', currentGame.id);

      if (error) throw error;

      setTeamsLocked(true);
      const updatedGame = { ...currentGame, teams_locked: true };
      setCurrentGame(updatedGame);
      localStorage.setItem(MAZE_GAME_STORAGE_KEY, JSON.stringify(updatedGame));
      
      // Send notification to Telegram group
      const teamSummary = currentGame.teams
        .map(team => `${team.name}: ${team.members.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`)
        .join('\n');
        
      await sendMessageToGroup(`üîí –ö–æ–º–∞–Ω–¥—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã!\n\n${teamSummary}`, 'admin');
      
      showNotification({
        title: '–ö–æ–º–∞–Ω–¥—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã',
        message: '–¢–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω',
        type: 'success'
      });
    } catch (error) {
      console.error('Error locking teams:', error);
      showNotification({
        title: '–û—à–∏–±–∫–∞',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã',
        type: 'error'
      });
    }
  };

  const handleAddUserToTeam = async (userId: string, teamId: string) => {
    if (!currentGame || teamsLocked) return;

    const updatedTeams = currentGame.teams.map(team => {
      if (team.id === teamId) {
        return { ...team, members: [...team.members, userId] };
      }
      return {
        ...team,
        members: team.members.filter(id => id !== userId)
      };
    });

    try {
      const { error } = await supabase
        .from('maze_games')
        .update({ teams: updatedTeams })
        .eq('id', currentGame.id);

      if (error) throw error;

      setCurrentGame({ ...currentGame, teams: updatedTeams });
      localStorage.setItem(MAZE_GAME_STORAGE_KEY, JSON.stringify({
        ...currentGame,
        teams: updatedTeams
      }));
    } catch (error) {
      console.error('Error updating team:', error);
      showNotification({
        title: '–û—à–∏–±–∫–∞',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É',
        type: 'error'
      });
    }
  };

  const handleUpdateTeamLevel = async (teamId: string, increment: boolean) => {
    if (!currentGame) return;

    const updatedTeams = currentGame.teams.map(team => {
      if (team.id === teamId) {
        return {
          ...team,
          level: Math.max(0, team.level + (increment ? 1 : -1))
        };
      }
      return team;
    });

    try {
      const { error } = await supabase
        .from('maze_games')
        .update({ teams: updatedTeams })
        .eq('id', currentGame.id);

      if (error) throw error;

      setCurrentGame({ ...currentGame, teams: updatedTeams });
      localStorage.setItem(MAZE_GAME_STORAGE_KEY, JSON.stringify({
        ...currentGame,
        teams: updatedTeams
      }));
    } catch (error) {
      console.error('Error updating team level:', error);
      showNotification({
        title: '–û—à–∏–±–∫–∞',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–∞–Ω–¥—ã',
        type: 'error'
      });
    }
  };

  if (!currentGame) {
    return <NoGame onStart={handleStartGame} loading={loading} />;
  }

  return (
    <div className="space-y-4">
      <div className="card p-4">
        <GameControls
          currentGame={currentGame}
          teamsLocked={teamsLocked}
          onEndGame={handleEndGame}
          onLockTeams={handleLockTeams}
          loading={loading}
        />

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {currentGame.teams.map((team) => (
            <TeamCard
              key={team.id}
              team={team}
              users={users}
              teamsLocked={teamsLocked}
              onAddUser={(userId) => handleAddUserToTeam(userId, team.id)}
              onUpdateLevel={(increment) => handleUpdateTeamLevel(team.id, increment)}
            />
          ))}
        </div>
      </div>
    </div>
  );
}

export default MazeGameControl;